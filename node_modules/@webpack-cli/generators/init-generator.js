"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const logSymbols = require("log-symbols");
const Generator = require("yeoman-generator");
const path = require("path");
const package_manager_1 = require("@webpack-cli/utils/package-manager");
const webpack_scaffold_1 = require("@webpack-cli/webpack-scaffold");
const utils_1 = require("./utils");
/**
 *
 * Generator for initializing a webpack config
 *
 * @class 	InitGenerator
 * @extends Generator
 * @returns {Void} After execution, transforms are triggered
 *
 */
class InitGenerator extends Generator {
    constructor(args, opts) {
        super(args, opts);
        (this.usingDefaults = false), (this.isProd = this.usingDefaults ? true : false);
        this.dependencies = ["webpack", "webpack-cli", "babel-plugin-syntax-dynamic-import"];
        if (this.isProd) {
            this.dependencies.push("terser-webpack-plugin");
        }
        else {
            this.dependencies.push("webpack-dev-server");
        }
        this.configuration = {
            config: {
                configName: this.isProd ? "prod" : "config",
                topScope: [],
                webpackOptions: {
                    mode: this.isProd ? "'production'" : "'development'",
                    entry: undefined,
                    output: undefined,
                    plugins: [],
                    module: {
                        rules: []
                    }
                }
            }
        };
        // add splitChunks options for transparency
        // defaults coming from: https://webpack.js.org/plugins/split-chunks-plugin/#optimization-splitchunks
        this.configuration.config.topScope.push("const path = require('path');", "const webpack = require('webpack');", "\n", utils_1.tooltip.splitChunks());
        if (this.isProd) {
            this.configuration.config.topScope.push(utils_1.tooltip.terser(), "const TerserPlugin = require('terser-webpack-plugin');", "\n");
        }
        this.configuration.config.webpackOptions.plugins.push("new webpack.ProgressPlugin()");
        let optimizationConfig = utils_1.getDefaultOptimization(this.isProd);
        this.configuration.config.webpackOptions.optimization = optimizationConfig;
        if (!this.isProd) {
            this.configuration.config.webpackOptions.devServer = {
                open: true
            };
        }
    }
    prompting() {
        return __awaiter(this, void 0, void 0, function* () {
            const done = this.async();
            const self = this;
            let regExpForStyles;
            let ExtractUseProps;
            process.stdout.write(`\n${logSymbols.info}${chalk_1.default.blue(" INFO ")} ` +
                `For more information and a detailed description of each question, have a look at: ` +
                `${chalk_1.default.bold.green("https://github.com/webpack/webpack-cli/blob/master/INIT.md")}\n`);
            process.stdout.write(`${logSymbols.info}${chalk_1.default.blue(" INFO ")} ` +
                `Alternatively, run "webpack(-cli) --help" for usage info\n\n`);
            const { multiEntries } = yield this.prompt([
                webpack_scaffold_1.Confirm("multiEntries", "Will your application have multiple bundles?", false)
            ]);
            // TODO string | object
            const entryOption = yield utils_1.entryQuestions(self, multiEntries);
            if (typeof entryOption === "string" && entryOption.length > 0) {
                this.configuration.config.webpackOptions.entry = `${entryOption}`;
            }
            else if (typeof entryOption === "object") {
                this.configuration.config.webpackOptions.entry = entryOption;
            }
            const { outputDir } = yield this.prompt([
                webpack_scaffold_1.Input("outputDir", "In which folder do you want to store your generated bundles?", "dist")
            ]);
            // As entry is not required anymore and we dont set it to be an empty string or """""
            // it can be undefined so falsy check is enough (vs entry.length);
            if (!this.configuration.config.webpackOptions.entry && !this.usingDefaults) {
                this.configuration.config.webpackOptions.output = {
                    chunkFilename: "'[name].[chunkhash].js'",
                    filename: "'[name].[chunkhash].js'"
                };
            }
            else if (!this.usingDefaults) {
                this.configuration.config.webpackOptions.output = {
                    filename: "'[name].[chunkhash].js'"
                };
            }
            if (!this.usingDefaults && outputDir.length) {
                this.configuration.config.webpackOptions.output.path = `path.resolve(__dirname, '${outputDir}')`;
            }
            const { langType } = yield this.prompt([
                webpack_scaffold_1.List("langType", "Will you use one of the below JS solutions?", [utils_1.LangType.ES6, utils_1.LangType.Typescript, "No"])
            ]);
            utils_1.langQuestionHandler(this, langType);
            this.langType = langType;
            const { stylingType } = yield this.prompt([
                webpack_scaffold_1.List("stylingType", "Will you use one of the below CSS solutions?", [
                    "No",
                    utils_1.StylingType.CSS,
                    utils_1.StylingType.SASS,
                    utils_1.StylingType.LESS,
                    utils_1.StylingType.PostCSS
                ])
            ]);
            ({ ExtractUseProps, regExpForStyles } = utils_1.styleQuestionHandler(self, stylingType));
            if (this.isProd) {
                // Ask if the user wants to use extractPlugin
                const { useExtractPlugin } = yield this.prompt([
                    webpack_scaffold_1.Input("useExtractPlugin", "If you want to bundle your CSS files, what will you name the bundle? (press enter to skip)")
                ]);
                if (regExpForStyles) {
                    if (this.isProd) {
                        const cssBundleName = useExtractPlugin;
                        this.dependencies.push("mini-css-extract-plugin");
                        this.configuration.config.topScope.push(utils_1.tooltip.cssPlugin(), "const MiniCssExtractPlugin = require('mini-css-extract-plugin');", "\n");
                        if (cssBundleName.length !== 0) {
                            this.configuration.config.webpackOptions.plugins.push(
                            // TODO: use [contenthash] after it is supported
                            `new MiniCssExtractPlugin({ filename:'${cssBundleName}.[chunkhash].css' })`);
                        }
                        else {
                            this.configuration.config.webpackOptions.plugins.push("new MiniCssExtractPlugin({ filename:'style.css' })");
                        }
                        ExtractUseProps.unshift({
                            loader: "MiniCssExtractPlugin.loader"
                        });
                    }
                    this.configuration.config.webpackOptions.module.rules.push({
                        test: regExpForStyles,
                        use: ExtractUseProps
                    });
                }
            }
            if (!this.isProd) {
                this.dependencies.push("html-webpack-plugin");
                const htmlWebpackDependency = "html-webpack-plugin";
                const htmlwebpackPlugin = utils_1.generatePluginName(htmlWebpackDependency);
                this.configuration.config.topScope.push(`const ${htmlwebpackPlugin} = require('${htmlWebpackDependency}')`, "\n", utils_1.tooltip.html());
                this.configuration.config.webpackOptions.plugins.push(`new ${htmlwebpackPlugin}()`);
            }
            done();
        });
    }
    installPlugins() {
        const packager = package_manager_1.getPackageManager();
        const opts = packager === "yarn" ? { dev: true } : { "save-dev": true };
        this.scheduleInstallTask(packager, this.dependencies, opts);
    }
    writing() {
        this.config.set("configuration", this.configuration);
        const packageJsonTemplatePath = "./templates/package.json.js";
        this.fs.extendJSON(this.destinationPath("package.json"), require(packageJsonTemplatePath)(this.isProd));
        const generateEntryFile = (entryPath, name) => {
            entryPath = entryPath.replace(/'/g, "");
            this.fs.copyTpl(path.resolve(__dirname, "./templates/index.js"), this.destinationPath(entryPath), { name });
        };
        // Generate entry file/files
        const entry = this.configuration.config.webpackOptions.entry;
        if (typeof entry === "string") {
            generateEntryFile(entry, "your main file!");
        }
        else if (typeof entry === "object") {
            Object.keys(entry).forEach((name) => generateEntryFile(entry[name], `${name} main file!`));
        }
        // Generate README
        this.fs.copyTpl(path.resolve(__dirname, "./templates/README.md"), this.destinationPath("README.md"), {});
        // Genrate tsconfig
        if (this.langType === utils_1.LangType.Typescript) {
            const tsConfigTemplatePath = "./templates/tsconfig.json.js";
            this.fs.extendJSON(this.destinationPath("tsconfig.json"), require(tsConfigTemplatePath));
        }
    }
}
exports.default = InitGenerator;
