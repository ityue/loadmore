"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const webpack_scaffold_1 = require("@webpack-cli/webpack-scaffold");
const index_1 = require("./index");
/**
 * Returns Inquirer question for given action
 * @param {string} action action for which question has to be prompted
 * @returns {Question} Question for given action
 */
exports.manualOrListInput = (action) => {
    const actionQuestion = `What do you want to add to ${action}?`;
    return webpack_scaffold_1.Input("actionAnswer", actionQuestion);
};
exports.actionTypeQuestion = webpack_scaffold_1.AutoComplete("actionType", "What property do you want to add to?", {
    pageSize: 7,
    source: index_1.searchProps,
    suggestOnly: false
});
exports.entryTypeQuestion = webpack_scaffold_1.Confirm("entryType", "Will your application have multiple bundles?", false);
exports.topScopeQuestion = webpack_scaffold_1.Input("topScope", "What do you want to add to topScope?");
const mergeFileQuestionsFunction = () => {
    const mergePathQuestion = "What is the location of webpack configuration with which you want to merge current configuration?";
    const mergePathValidator = (path) => {
        const resolvedPath = path_1.resolve(process.cwd(), path);
        if (fs_1.existsSync(resolvedPath)) {
            if (/\.js$/.test(path)) {
                return true;
            }
            return "Path doesn't correspond to a javascript file";
        }
        return "Invalid path provided";
    };
    const mergeConfigNameQuestion = "What is the name by which you want to denote above configuration?";
    return [
        webpack_scaffold_1.InputValidate("mergeFile", mergePathQuestion, mergePathValidator),
        webpack_scaffold_1.Input("mergeConfigName", mergeConfigNameQuestion)
    ];
};
exports.mergeFileQuestion = mergeFileQuestionsFunction();
